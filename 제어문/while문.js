// // 23.02.12 공부
// /* 프로그래밍 핵심 개념 in JavaScript */
// // [제어문] 13. While문

// While문(while statement) - 반복문

while (조건부분) {
  동작부분
}

let i = 1;
// 글로벌 변수 미리 만들어놔야 함

while (i <= 10) {
  console.log(`${i} 신상아 최고!`);
  i++;
}

for (let i = 1; i <= 10; i++) {
  console.log(`${i} 신상아 최고!`);
}


// // while문에는 초기화 부분이 없기 때문에 반복에 필요한 갯수를 카운트 하려면
// // 반복문 밖에서 글로벌 변수 let i = 1; 을 미리 만들어줘야 한다.

// // for문이 가독성 측면에서 더 좋은 것 같이 보이는데,
// 그러면 while문은 언제 쓰면 편할까?

let i = 30;

while (i % 7 !== 0) {
  // 나머지는 2가 되고, 2는 0과 일치하지 않기 때문에 ture = 1, i가 1이 증가
  i++;
  // 그럼 여기서 31인 i가 증가하게 됩니다. 계속해서 반복하다가 나머지 0 나오는 35에서 멈춤
}

console.log(i);

// 35

// while문을 활용해서 i보다 큰 수 중에서 가장 작은 7의 배수를 찾는 코드인데요.
// 변수 i를 선언하고 30을 할당, 그럼 30보다 큰 수 중에서 가장 작은 7의 배수를 찾게 되겠죠.
// while문이 시작되면 30인 아이가 이 조건 부분에서 평가가 되는데, 이 부분은 나머지 연산자죠.
// 30을 7로 나누면, 몫이 4고 나머지는 2가 되겠죠. 2는 0과 일치하지 않기 때문에 그 !== 부분이 true가 되서
// i가 1씩 증가하게 됩니다.i++; 그러면 또 31인 i가 while에서 평가가 된다.이런식으로 계속해서 반복하다가
// i가 35가 되는 순간에 조건식이 false가 되고, 반복문이 종료되게 됩니다.
// 그러면 그동안 증가한 i가 여기 console.log(i) 에서 출력이 된다.

// 그런데 코드를 자세히 살펴보면 반복문 안에서 변수를 만들어주는게 아니라,
// 반복문 밖에 글로벌 변수 (let i = 30;) 를 가지고 조건을 평가하고, 반복문 안에서도 이 변수를 다루고 있죠.
// 그리고 반복문이 다 실행되고 난 뒤에 반복문 밖에서 이 값을 사용하고 있습니다. console.log(i);

// 물론 이 코드를 for문으로도 충분히 활용할 수 있지만, for문은 보통 조건비교에서 사용되는 값을
// 반복문 내부에서만 사용하고 반복이 끝나면 외부에서는 사용할 수 없기 때문에 지금처럼 글로벌 변수를
// 조건 비교에 사용하고, 반복문 내부에서도 다루면서 결과적으로 반복문이 종료된 다음에도
// 이 변수를 사용해야 할 때는 for문보다 while문을 활용하는 것이 좋습니다.

// 상대적으로 for문보다 사용빈도가 낮지만, 상황에 따라서는 while문을 활용하는게
// 조금 더 효율적일 수도 있다는 점 기억해두시면 좋을 것 같습니다.
// 언제 for문을 쓰고, 언제 while문을 쓰면 좋을지 여러분도 한 번 고민해보세요.