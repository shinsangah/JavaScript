// 23.02.10 공부
/* 프로그래밍 핵심 개념 in JavaScript */
// 16. 형 변환 2

// 형 변환 (Type Conversion)

console.log('4' - true);
// 3

// 대부분의 프로그래밍 언어에서는 이렇게 서로 다른 자료형을 오류로 처리하는데,
// 문자열 4와 불린 true 연산이 된 결과가 아니라,
// 일정한 규칙에 따라서 이 두 값이 자동으로 변환된 다음에 연산이 이루어진 결과다.

// 상황에 따라서 유연하게 연산하는 이런 자바스크립트의 특징이 때로는 장점이 될 수도 있지만,
// 이렇게 자동으로 형 변환되는 규칙을 명확하게 이해하지 않으면 코드를 작성할 때 우리가 예상하지 못한 형태로 연산이 되어버릴 수 있다.


// 산술 연산 (+, -, *, /, %, **)

// * 다른 연산자들은 숫자를 연산하는 기능밖에 없기 때문에 모든 값을 숫자로 바꿔서 연산을 하지만,
// 더하기 연산자는 문자열을 연결하는 기능도 있다. 더하기 처럼 2가지 기능이 있는 경우에는 상황에 따라서 조금 헷갈릴 수도 있다. 
console.log(4 + '2');
// 42
// javascript에서 + 기호는 숫자를 더 하는 것보다 문자열을 연결하는 기능이 조금 더 강하다.
// 그래서 + 를 할 때, 순서에 상관없이 어느 한 쪽이라도 문자열이 있다면 양쪽 모두를 문자열로 바꾼 다음 문자열 연산으로 동작한다!
console.log(4 + 2);
// 6

// Boolean을 숫자로 바꾸면 1과 0이 되었던 점
// Number 함수를 사용하지도 않았는데 이 값들을 자동으로 숫자 0,1 로 형 변환해서 연산함
console.log(4 - true);
// 3
console.log(4 * false);
// 0

console.log(4 / '2');
// 2

console.log('4' ** true);
// 4
// 양쪽이 모두 숫자가 아닌데도, 숫자 4, 숫자 1로 연산이 되었음

console.log(4 % 'two');
// NaN
// 'two' 라는 문자열은 숫자로 형 변환 했을 때 NaN 값이기 때문에 어떤 값과 연산을 해도 NaN 값이 나옴


// 관계 비교 연산 (<, <=, >, >=)
// 특별한 경우를 제외하고, 두 값을 모두 숫자형으로 변환하여 비교하는게 일반적이다.

console.log(2 < '3');
// true (2<3)
console.log(2 > true);
// true (2>1)
console.log('2' <= false);
// false (2<=0)
console.log('two' >= 1);
// false (NaN>=1)
// 이렇게 비교가 불가능한 경우에도 false가 나온다.


// 같음 비교 연산 (===, !==, ==, !=)


// 일치, 불일치(!==)
// 일치 비교는 형변환이 일어나지 않는다. *
console.log(1 === '1');
// false
console.log(1 === true);
// false

// 동등, 부등(!=)
// 숫자 형태로 형변환이 일어난다.
console.log(1 == '1');
// true
// 문자열 '1'이 숫자 1로 변환되어 1 == 1
console.log(1 == true);
// true
// 불린 true가 숫자 1로 변환되어 1 ==1

// 정리 :
// 이렇게 == (동등) 등호 2개를 사용하게 되면 형변환이 일어나기 때문에
// 코드가 조금만 복잡해지게 되면 우리가 예상하지 못한 형태로 형 변환이 될 가능성이 있습니다.
// 그래서 특별한 경우가 아니라면, 두 값이 서로 같은지를 비교할 때는
// 등호 2개 보다는 === (일치) 3개를 이용하는 것이 조금 더 안전한 코드를 작성하는데 도움이 됩니다.